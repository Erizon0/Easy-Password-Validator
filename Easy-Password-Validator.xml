<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easy-Password-Validator</name>
    </assembly>
    <members>
        <member name="T:Easy_Password_Validator.Enums.L33tLevel">
            <summary>
            Specifies the level of l33t speak to use with letter substitutions
            </summary>
        </member>
        <member name="F:Easy_Password_Validator.Enums.L33tLevel.Basic">
            <summary>
            Makes common substitutions for some letters such as E => 3, A => 4, etc.
            </summary>
        </member>
        <member name="F:Easy_Password_Validator.Enums.L33tLevel.Intermediate">
            <summary>
            Adds alternate substitutions for some of the basic ones
            </summary>
        </member>
        <member name="F:Easy_Password_Validator.Enums.L33tLevel.Advanced">
            <summary>
            Makes substitutions for all letters and contains complex items such as M => /\/\, A => /\, etc.
            </summary>
        </member>
        <member name="F:Easy_Password_Validator.Enums.L33tLevel.Custom">
            <summary>
            Indicates the user will provide the substitution list
            </summary>
        </member>
        <member name="T:Easy_Password_Validator.Interfaces.IPasswordRequirements">
            <summary>
            Interface to define elements required by built-in password tester
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.MinLength">
            <summary>
            Specifies the minimum length requirement for a password
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.MinUniqueCharacters">
            <summary>
            Specifies the minimum amount of unique characters required in a password
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.MaxRepeatSameCharacter">
            <summary>
            Specifies the maximum amount of times a single character may appear beside itself in a password
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.MaxNeighboringCharacter">
            <summary>
            Specifies the maximum amount of characters neighboring one another on the keyboard that may appear in a password
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.RequireDigit">
            <summary>
            Specifies whether a password must contain at least one digit
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.RequireLowercase">
            <summary>
            Specifies whether a password must contain at least one lowercase letter
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.RequireUppercase">
            <summary>
            Specifies whether a password must contain at least one uppercase letter
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.RequirePunctuation">
            <summary>
            Specifies whether a password must contain at least one punctuation mark
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.MinScore">
            <summary>
            Specifies the minimum total score required for a password to be considered valid
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.MinEntropy">
            <summary>
            Specifies the minimum entropy score required for a password to be considered valid
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.UseEntropy">
            <summary>
            Specifies whether to use the entropy checking test
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordRequirements.ExitOnFailure">
            <summary>
            Specifies whether to stop execution on the first failure or continue and report after all tests complete
            </summary>
        </member>
        <member name="T:Easy_Password_Validator.Interfaces.IPasswordTest">
            <summary>
            Interface to define requirements for tests that will be run against passwords
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordTest.ScoreModifier">
            <summary>
            The amount the password score should be changed by after running the test
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordTest.FailureMessage">
            <summary>
            A message to display to the end user on test failure
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordTest.Settings">
            <summary>
            Container to pass validator configuration to tester
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Interfaces.IPasswordTest.BadList">
            <summary>
            Contains an optional listing of invalid passwords to compare against
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Interfaces.IPasswordTest.TestAndScore(System.String)">
            <summary>
            Executes the test on the provided password and updates the score modifier
            </summary>
            <param name="password">The password to run the test on</param>
        </member>
        <member name="T:Easy_Password_Validator.L33tDecoderService">
            <summary>
            Service that converts l33t encoded text to plain text
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.L33tDecoderService.GetReplacements(Easy_Password_Validator.Enums.L33tLevel)">
            <summary>
            Returns the full collection of l33t replacements for the specified level
            </summary>
            <param name="level">The dictionary level to return</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="F:Easy_Password_Validator.L33tDecoderService.BasicReplacements">
            <summary>
            Returns the collection of l33t replacements for <see cref="F:Easy_Password_Validator.Enums.L33tLevel.Basic"/> substitutions
            </summary>
        </member>
        <member name="F:Easy_Password_Validator.L33tDecoderService.IntermediateReplacements">
            <summary>
            Returns the collection of l33t replacements for <see cref="F:Easy_Password_Validator.Enums.L33tLevel.Intermediate"/> substitutions (does not include <see cref="F:Easy_Password_Validator.Enums.L33tLevel.Basic"/>)
            </summary>
        </member>
        <member name="F:Easy_Password_Validator.L33tDecoderService.AdvancedReplacements">
            <summary>
            Returns the collection of l33t replacements for <see cref="F:Easy_Password_Validator.Enums.L33tLevel.Advanced"/> substitutions (does not include <see cref="F:Easy_Password_Validator.Enums.L33tLevel.Basic"/> or <see cref="F:Easy_Password_Validator.Enums.L33tLevel.Intermediate"/>)
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.L33tDecoderService.Decode(System.String,Easy_Password_Validator.Enums.L33tLevel,System.Collections.Generic.IEnumerable{Easy_Password_Validator.Models.L33tReplacement})">
            <summary>
            Converts the provided text from l33t format to plain text
            </summary>
            <param name="l33t">The encoded text to parse</param>
            <param name="level">Specifies the replacement level to use</param>
            <param name="replacements">The list to use when decoding the provided text with <see cref="F:Easy_Password_Validator.Enums.L33tLevel.Custom"/></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Easy_Password_Validator.L33tDecoderService.Decode(System.String,System.Collections.Generic.IEnumerable{Easy_Password_Validator.Models.L33tReplacement})">
            <summary>
            Converts the provided text from l33t format to plain text
            </summary>
            <param name="l33t">The encoded text to parse</param>
            <param name="replacements">The list to use when decoding the provided text</param>
        </member>
        <member name="T:Easy_Password_Validator.Models.L33tReplacement">
            <summary>
            Model to create lists of l33t speak decodings
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.L33tReplacement.PlainText">
            <summary>
            The regular character used in words
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.L33tReplacement.L33tEncoded">
            <summary>
            The l33t edition of the character
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.L33tReplacement.Level">
            <summary>
            The level of l33t speak that uses this replacement
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.L33tReplacement.RunOrder">
            <summary>
            Specifies the order to execute replacements where lower numbers execute first (useful in cases such as M => /\/\ and A => /\)
            </summary>
        </member>
        <member name="T:Easy_Password_Validator.Models.PasswordRequirements">
            <summary>
            Default implementation of <see cref="T:Easy_Password_Validator.Interfaces.IPasswordRequirements"/>
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.MinLength">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.MinUniqueCharacters">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.MaxRepeatSameCharacter">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.MaxNeighboringCharacter">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.RequireDigit">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.RequireLowercase">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.RequireUppercase">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.RequirePunctuation">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.MinScore">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.MinEntropy">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.UseEntropy">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Models.PasswordRequirements.ExitOnFailure">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Models.PatternMapItem">
            <summary>
            Class used to create a map of a keyboard layout
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.PatternMapItem.RegularKey">
            <summary>
            The value of the key when pressed on the keyboard
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.PatternMapItem.ShiftKey">
            <summary>
            The value of the key when pressed on the keyboard while a Shift key is also being pressed
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Models.PatternMapItem.NeighborKeys">
            <summary>
            The characters to be considered neighboring key presses (ex. e => 3, 4, w, r, s, d)
            </summary>
        </member>
        <member name="T:Easy_Password_Validator.PasswordValidatorService">
            <summary>
            Main class to analyse passwords via requirement checks and scoring
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares the validator service for use analysing passwords
            </summary>
            <param name="passwordRequirements">The parameters to analyse passwords with</param>
        </member>
        <member name="P:Easy_Password_Validator.PasswordValidatorService.Score">
            <summary>
            The resulting score of an analysed password
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.PasswordValidatorService.Settings">
            <summary>
            The configuration settings to use when analysing passwords
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.PasswordValidatorService.FailureMessages">
            <summary>
            Contains a listing of any reasons a password failed analysis
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.TestAndScore(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Runs scoring and validation on the specified password
            </summary>
            <param name="password">The password to test</param>
            <param name="userInformation">An optional list containing user information to compare against the password</param>
            <param name="languageCode">An optional language code used for error text</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.AddTest(Easy_Password_Validator.Interfaces.IPasswordTest)">
            <summary>
            Adds a custom password test to the list of tests that will be run against provided passwords
            </summary>
            <param name="test">The test to add</param>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.UpdateL33tReplacements(System.Collections.Generic.IEnumerable{Easy_Password_Validator.Models.L33tReplacement})">
            <summary>
            Updates the collection of l33t replacements that will be used to decode l33t based passwords
            </summary>
            <param name="l33TReplacements">The replacements to use</param>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.RunPasswordTests(System.String)">
            <summary>
            Runs each loaded password test against the provided password
            </summary>
            <param name="password">The password to test</param>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.RunBadListTests(System.String,System.Boolean,Easy_Password_Validator.Tests.TestBadList)">
            <summary>
            Runs each applicable bad list test against the provided password
            </summary>
            <param name="password">The password to test</param>
            <param name="isL33t">Specifies whether this password is a l33t variant</param>
            <param name="userBadList">An optional bad list to check against containing user information</param>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.RunTest(System.String,Easy_Password_Validator.Interfaces.IPasswordTest)">
            <summary>
            Runs a single test on a password and updates the failure message and score
            </summary>
            <param name="password">The password to test</param>
            <param name="test">The test to run on the password</param>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.LoadBadLists">
            <summary>
            Loads the badlists into memory
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.LoadLocalBadLists">
            <summary>
            Attempts to load locally stored copies of the badlists
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.LoadRemoteBadLists">
            <summary>
            Attempts to load remote copies of the badlists
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.GetGraphemeClusters(System.String)">
            <summary>
            Separates a string into its grapheme clusters (or characters)
            </summary>
            <param name="value">The value to separate</param>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.Reverse(System.String)">
            <summary>
            Reverses the provided string
            </summary>
            <param name="value">The value to reverse</param>
        </member>
        <member name="M:Easy_Password_Validator.PasswordValidatorService.CheckValidLanguage(System.String)">
            <summary>
            Checks to see that the user provided language code is supported
            </summary>
            <param name="languageCode">The code to check</param>
        </member>
        <member name="T:Easy_Password_Validator.PatternMapService">
            <summary>
            Class to detect keyboard or user-supplied character patterns in a string
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.IsNeighbor(System.Char,System.Char)">
            <summary>
            Checks two characters to see whether they are neighbors (using Qwerty map)
            </summary>
            <param name="key">The regular or shift key to lookup</param>
            <param name="neighbor">The neighbor to look for</param>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.IsNeighbor(System.Char,System.Char,System.Collections.Generic.List{Easy_Password_Validator.Models.PatternMapItem})">
            <summary>
            Checks two characters to see whether they are neighbors
            </summary>
            <param name="key">The regular or shift key to lookup</param>
            <param name="neighbor">The neighbor to look for</param>
            <param name="map">A custom map to use</param>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.GetMapItem(System.Char)">
            <summary>
            Returns the specified map item provided it exists (using Qwerty map)
            </summary>
            <param name="key">The regular or shift key to return</param>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.GetMapItem(System.Char,System.Collections.Generic.List{Easy_Password_Validator.Models.PatternMapItem})">
            <summary>
            Returns the specified map item provided it exists
            </summary>
            <param name="key">The regular or shift key to return</param>
            <param name="map">A custom map to use</param>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.GetPatterns(System.String)">
            <summary>
            Checks a string and returns any found patterns (using Qwerty map)
            </summary>
            <param name="test">The string to check</param>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.GetPatterns(System.String,System.Collections.Generic.List{Easy_Password_Validator.Models.PatternMapItem})">
            <summary>
            Checks a string and returns any found patterns
            </summary>
            <param name="test">The string to check</param>
            <param name="map">A custom map to use</param>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.IsPattern(System.String)">
            <summary>
            Checks to see whether the specified string is a pattern (using Qwerty map)
            </summary>
            <param name="test">The string to check</param>
        </member>
        <member name="M:Easy_Password_Validator.PatternMapService.IsPattern(System.String,System.Collections.Generic.List{Easy_Password_Validator.Models.PatternMapItem})">
            <summary>
            Checks to see whether the specified string is a pattern
            </summary>
            <param name="test">The string to check</param>
            <param name="map">A custom map to use</param>
        </member>
        <member name="F:Easy_Password_Validator.PatternMapService.QwertyMap">
            <summary>
            The default Qwerty keyboard pattern map
            </summary>
        </member>
        <member name="T:Easy_Password_Validator.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedBadList">
            <summary>
              Looks up a localized string similar to Password is in list of known bad passwords..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedDigit">
            <summary>
              Looks up a localized string similar to Must have at least one digit in password..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedEntropy">
            <summary>
              Looks up a localized string similar to Password must have entropy score of at least {0}..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedLength">
            <summary>
              Looks up a localized string similar to Password must be at least {0} characters long..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedLowercase">
            <summary>
              Looks up a localized string similar to Must have at least one lowercase letter in password..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedPattern">
            <summary>
              Looks up a localized string similar to Password can have a maximum of {0} characters that neighbor each other on the keyboard..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedPunctuation">
            <summary>
              Looks up a localized string similar to Must have at least one punctuation mark in password..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedRepeat">
            <summary>
              Looks up a localized string similar to Password can have a maximum of {0} adjacent repeat characters..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedUnique">
            <summary>
              Looks up a localized string similar to Must have at least {0} unique characters in password..
            </summary>
        </member>
        <member name="P:Easy_Password_Validator.Properties.Resources.FailedUppercase">
            <summary>
              Looks up a localized string similar to Must have at least one uppercase letter in password..
            </summary>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestBadList">
            <summary>
            Checks whether a password is contained within the provided list
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestBadList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Prepares test for use and accepts a list of bad passwords to check
            </summary>
            <param name="badList">The badlist to use</param>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestBadList.#ctor(System.String)">
            <summary>
            Reads a file containing bad passwords and loads them into the badlist
            </summary>
            <param name="fileName">The full filename containing the bad password list to use</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestBadList.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestBadList.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestBadList.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestBadList.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestBadList.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestDigit">
            <summary>
            Checks to see whether the password contains any digits
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestDigit.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestDigit.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestDigit.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestDigit.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestDigit.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestDigit.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestEntropy">
            <summary>
            Checks to see whether a password meets the minimum entropy requirements
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestEntropy.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestEntropy.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestEntropy.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestEntropy.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestEntropy.BadList">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestEntropy.PatternMap">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestEntropy.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestLength">
            <summary>
            Checks to see whether a password meets the minimum string length requirements
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestLength.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLength.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLength.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLength.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLength.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestLength.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestLowercase">
            <summary>
            Checks to see whether the password contains any lowercase letters
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestLowercase.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLowercase.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLowercase.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLowercase.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestLowercase.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestLowercase.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestPattern">
            <summary>
            Checks to see whether a password meets the maximum neighboring characters requirements
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestPattern.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements,System.Collections.Generic.List{Easy_Password_Validator.Models.PatternMapItem})">
            <summary>
            Prepares test for use and allows using custom pattern
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
            <param name="map">An optional custom pattern mapping to check</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPattern.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPattern.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPattern.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPattern.BadList">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPattern.PatternMap">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestPattern.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestPunctuation">
            <summary>
            Checks to see whether the password contains any punctuation marks
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestPunctuation.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPunctuation.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPunctuation.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPunctuation.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestPunctuation.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestPunctuation.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestRepeat">
            <summary>
            Checks to see whether a password meets the maximum consecutive characters requirements
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestRepeat.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestRepeat.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestRepeat.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestRepeat.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestRepeat.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestRepeat.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestUnique">
            <summary>
            Checks to see whether a password meets the minimum unique characters requirements
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestUnique.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUnique.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUnique.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUnique.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUnique.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestUnique.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Password_Validator.Tests.TestUppercase">
            <summary>
            Checks to see whether the password contains any uppercase letters
            </summary>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestUppercase.#ctor(Easy_Password_Validator.Interfaces.IPasswordRequirements)">
            <summary>
            Prepares test for use
            </summary>
            <param name="passwordRequirements">Object containing current settings</param>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUppercase.ScoreModifier">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUppercase.FailureMessage">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUppercase.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Password_Validator.Tests.TestUppercase.BadList">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Password_Validator.Tests.TestUppercase.TestAndScore(System.String)">
            <inheritdoc/>
        </member>
    </members>
</doc>
